
@BaseClass = BaseProperties_kole_paintball
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// Paintball.Bombsite
//
@SolidClass base(BaseProperties_kole_paintball) tags( Trigger, Trigger ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= pb_bombsite : "Place where the Red Team can plant the bomb."
[
	letter(string) : "Letter" :  : ""
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnBombPlanted(void) : ""
	output OnBombExplode(void) : ""
	output OnBombDefused(void) : ""
	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// Paintball.PlayerSpawnPoint
//
@PointClass base(BaseProperties_kole_paintball) editormodel( "models/editor/playerstart.vmdl", fixedbounds ) 
metadata
{
	entity_tool_name = "Player Spawnpoint"
	entity_tool_group = "PaintBall"
	entity_tool_tip = "Defines a point where players on a team can spawn."
}
= pb_spawnpoint : ""
[
	team(choices) : "Team" : 0 : "" =
	[
		0 : "None"
		1 : "Blue"
		2 : "Red"
	]
]

//
// Paintball.MapSettings
//
@PointClass base(BaseProperties_kole_paintball) 
metadata
{
	entity_tool_name = "Map Settings"
	entity_tool_group = "PaintBall"
}
= pb_map_settings : ""
[
	blueteamname(string) : "Blue Team Name" : "Blue" : ""
	redteamname(string) : "Red Team Name" : "Red" : ""

	output OnRoundStart(void) : ""
	output OnRoundEnd(void) : ""
	output OnRoundNew(void) : ""
	output OnBlueWin(void) : ""
	output OnRedWin(void) : ""
]

//
// Paintball.SpectatePoint
//
@PointClass base(BaseProperties_kole_paintball) editormodel( "models/editor/camera.vmdl" ) 
metadata
{
	entity_tool_name = "Spectate Point"
	entity_tool_group = "PaintBall"
	entity_tool_tip = "Defines a fixed point where a player can spectate from."
}
= pb_spectatepoint : ""
[
	index(string) : "Index" :  : ""
]

//
// Paintball.Bomb
//
@PointClass base(BaseProperties_kole_paintball) editormodel( "weapons/rust_shotgun/rust_shotgun.vmdl" ) = pb_bomb : "A bomb that can be planted on a bombsite."
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Paintball.Pistol
//
@PointClass base(BaseProperties_kole_paintball) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = pb_pistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Paintball.Shotgun
//
@PointClass base(BaseProperties_kole_paintball) editormodel( "weapons/rust_pumpshotgun/rust_pumpshotgun.vmdl" ) = pb_shotgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Paintball.SMG
//
@PointClass base(BaseProperties_kole_paintball) editormodel( "weapons/rust_smg/rust_smg.vmdl" ) = pb_smg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Paintball.Throwable
//
@PointClass base(BaseProperties_kole_paintball) editormodel( "models/grenade/grenade.vmdl" ) = pb_spike : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

